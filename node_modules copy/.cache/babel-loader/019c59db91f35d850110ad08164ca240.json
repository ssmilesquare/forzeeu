{"ast":null,"code":"import { Store } from 'pullstate';\n\n//return an (16 x 16) 2D array filled with \"#FFFFFF\"\nconst createEmptyCanvas = () => {\n  const output = [];\n\n  for (let i = 0; i < 16; i++) {\n    output[i] = [];\n\n    for (let j = 0; j < 16; j++) {\n      output[i].push('#FFFFFF');\n    }\n  }\n\n  return output;\n};\n\nconst colorSet = ['#000000', '#804000', '#FE0000', '#FE6A00', '#FFD800', '#00FF01', '#FFFFFF', '#01FFFF', '#0094FE', '#0026FF', '#B100FE', '#FF006E'];\nexport const PixelPainterStore = new Store({\n  canvas: createEmptyCanvas(),\n  colorSelect: \"#000000\"\n});\nexport const setCell = (x, y) => {\n  PixelPainterStore.update(s => {\n    s.canvas[x][y] = s.colorSelect;\n  });\n};\nexport const setSelected = color => {\n  PixelPainterStore.update(s => {\n    s.colorSelect = color;\n  });\n};\nexport const clearCanvas = () => {\n  PixelPainterStore.update(s => {\n    s.canvas = createEmptyCanvas();\n  });\n};\nexport const createRandomCanvas = () => {\n  PixelPainterStore.update(s => {\n    for (let i = 0; i < 16; i++) {\n      s.canvas[i] = [];\n\n      for (let j = 0; j < 16; j++) {\n        s.canvas[i].push(colorSet[Math.floor(Math.random() * 12)]);\n      }\n    }\n  });\n};","map":{"version":3,"sources":["D:/CPE_CMU/1_64/BACOMLAB/LAB/lab-07-ssmilesquare/src/stores/PixelPainterStore.ts"],"names":["Store","createEmptyCanvas","output","i","j","push","colorSet","PixelPainterStore","canvas","colorSelect","setCell","x","y","update","s","setSelected","color","clearCanvas","createRandomCanvas","Math","floor","random"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB;;AAQA;AACA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAMC,MAAkB,GAAG,EAA3B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAY,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BF,MAAAA,MAAM,CAACC,CAAD,CAAN,CAAUE,IAAV,CAAe,SAAf;AACD;AACF;;AACD,SAAOH,MAAP;AACD,CATD;;AAWA,MAAMI,QAAkB,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,SAAnE,EAA8E,SAA9E,EAAyF,SAAzF,EAAoG,SAApG,EAA+G,SAA/G,EAA0H,SAA1H,CAA3B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,IAAIP,KAAJ,CAAiC;AAChEQ,EAAAA,MAAM,EAAEP,iBAAiB,EADuC;AAEhEQ,EAAAA,WAAW,EAAE;AAFmD,CAAjC,CAA1B;AAKP,OAAO,MAAMC,OAAO,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAA0B;AAC/CL,EAAAA,iBAAiB,CAACM,MAAlB,CAAyBC,CAAC,IAAI;AAC5BA,IAAAA,CAAC,CAACN,MAAF,CAASG,CAAT,EAAYC,CAAZ,IAAiBE,CAAC,CAACL,WAAnB;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMM,WAAW,GAAIC,KAAD,IAAmB;AAC5CT,EAAAA,iBAAiB,CAACM,MAAlB,CAAyBC,CAAC,IAAI;AAC5BA,IAAAA,CAAC,CAACL,WAAF,GAAgBO,KAAhB;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC/BV,EAAAA,iBAAiB,CAACM,MAAlB,CAAyBC,CAAC,IAAI;AAC5BA,IAAAA,CAAC,CAACN,MAAF,GAAWP,iBAAiB,EAA5B;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMiB,kBAAkB,GAAG,MAAM;AACtCX,EAAAA,iBAAiB,CAACM,MAAlB,CAAyBC,CAAC,IAAI;AAC5B,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BW,MAAAA,CAAC,CAACN,MAAF,CAASL,CAAT,IAAc,EAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BU,QAAAA,CAAC,CAACN,MAAF,CAASL,CAAT,EAAYE,IAAZ,CAAiBC,QAAQ,CAACa,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAzB;AACD;AACF;AACF,GAPD;AAQD,CATM","sourcesContent":["import { Store } from 'pullstate'\r\n\r\ntype PixelPainterStoreType = {\r\n  //we save painted color as hex code (string) in 2D array\r\n  canvas: string[][]\r\n  colorSelect: string;\r\n}\r\n\r\n//return an (16 x 16) 2D array filled with \"#FFFFFF\"\r\nconst createEmptyCanvas = () => {\r\n  const output: string[][] = []\r\n  for (let i = 0; i < 16; i++) {\r\n    output[i] = []\r\n    for (let j = 0; j < 16; j++) {\r\n      output[i].push('#FFFFFF')\r\n    }\r\n  }\r\n  return output\r\n}\r\n\r\nconst colorSet: string[] = ['#000000', '#804000', '#FE0000', '#FE6A00', '#FFD800', '#00FF01', '#FFFFFF', '#01FFFF', '#0094FE', '#0026FF', '#B100FE', '#FF006E',]\r\n\r\nexport const PixelPainterStore = new Store<PixelPainterStoreType>({\r\n  canvas: createEmptyCanvas(),\r\n  colorSelect: \"#000000\"\r\n})\r\n\r\nexport const setCell = (x: number, y: number) => {\r\n  PixelPainterStore.update(s => {\r\n    s.canvas[x][y] = s.colorSelect;\r\n  })\r\n}\r\n\r\nexport const setSelected = (color: string) => {\r\n  PixelPainterStore.update(s => {\r\n    s.colorSelect = color;\r\n  })\r\n}\r\n\r\nexport const clearCanvas = () => {\r\n  PixelPainterStore.update(s => {\r\n    s.canvas = createEmptyCanvas();\r\n  })\r\n}\r\n\r\nexport const createRandomCanvas = () => {\r\n  PixelPainterStore.update(s => {\r\n    for (let i = 0; i < 16; i++) {\r\n      s.canvas[i] = []\r\n      for (let j = 0; j < 16; j++) {\r\n        s.canvas[i].push(colorSet[Math.floor(Math.random() * 12)]);\r\n      }\r\n    }\r\n  })\r\n}"]},"metadata":{},"sourceType":"module"}